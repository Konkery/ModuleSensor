class ClassAncestorSensor{constructor(_sensor_props,_opts){_opts.pins&&_opts.pins.forEach(pin=>{if(!+Pin(pin))throw new Error("Not a pin")}),this._Bus=_opts.bus,this._Pins=_opts.pins,this.InitSensProperties(_sensor_props)}InitSensProperties(sensor_props){const changeNotation=str=>`_${str[0].toUpperCase()}${str.substr(1)}`;if("number"!=typeof sensor_props.quantityChannel||sensor_props.quantityChannel<1)throw new Error("Invalid QuantityChannel arg ");this._QuantityChannel=sensor_props.quantityChannel,["name","type","typeInSignal","typeOutSignal","channelNames","busTypes"].forEach(prop=>{if(sensor_props[prop]instanceof Array)sensor_props[prop].forEach(elem=>{if("string"!=typeof elem)throw new Error("Incorrect sensor property")});else if("string"!=typeof sensor_props[prop])throw new Error("Incorrect sensor property");this[changeNotation(prop)]=sensor_props[prop]}),this._ManufacturingData=sensor_props.manufacturingData||{}}}class ClassMiddleSensor extends ClassAncestorSensor{constructor(_sensor_props,_opts){ClassAncestorSensor.apply(this,[_sensor_props,_opts]),this._Values=[],this._Channels=[],this._IsChUsed=[],this.InitChannels()}get CountChannels(){return this._Channels.filter(o=>o instanceof ClassChannel).length}GetChannel(_num){const num=_num;return this._Channels[num]instanceof ClassChannel?this._Channels[num]:null}InitChannels(){const defineAccessors=i=>{Object.defineProperty(this,`Ch${i}_Value`,{get:()=>this._Channels[i]._DataRefine._FilterFunc(this._Values[i]._arr),set:val=>{this._Values[i]._rawVal=val,val=this._Channels[i]._DataRefine.TransformOutValue(val),val=this._Channels[i]._DataRefine.SupressOutValue(val),this._Values[i].push(val),this._Channels[i]._Alarms.CheckZone(`this.Ch${i}_Value`)}})};for(let i=0;i<this._QuantityChannel;i++){try{this._Channels[i]=new ClassChannel(this,i)}catch(e){this._Channels[i]=null}this._Values[i]={_depth:1,_rawVal:void 0,_arr:[],push:function(_val){for(;this._arr.length>=this._depth;)this._arr.shift();this._arr.push(_val)}},defineAccessors(i)}this._IsChUsed[i]=!1}Init(_opts){}Start(_ch_num,_period,_opts){}Stop(_ch_num){}ChangeFreq(_ch_num,_period){}ConfigureRegs(_opts){}Reset(){}SetRepeatability(_rep){}SetPrecision(_pres){}Run(_ch_num,_opts){}Read(_reg){}Write(_reg,_val){}}class ClassChannel{constructor(sensor,num){if(sensor._Channels[num]instanceof ClassChannel)return sensor._Channels[num];this._ThisSensor=sensor,this._NumChannel=num,this._DataRefine=new ClassDataRefine,this._Alarms=new ClassAlarms,sensor._Channels[num]=this}get Value(){return this._ThisSensor[`Ch${this._NumChannel}_Value`]}get ID(){return this._ThisSensor._Name+this._NumChannel}get IsUsed(){return this._ThisSensor._IsChUsed[this._NumChannel]}Start(_period,_opts){return this._ThisSensor.Start(this._NumChannel,_period,_opts)}Stop(){return this._ThisSensor.Stop(this._NumChannel)}ChangeFreq(_period){return this._ThisSensor.ChangeFreq.call(this._ThisSensor,Array.from(arguments))}Reset(){return this._ThisSensor.Reset.apply(this._ThisSensor,Array.from(arguments))}SetFilterDepth(_depth){this._ThisSensor._Values[this._NumChannel]._depth=_depth}Run(_opts){const args=Array.from(arguments);return args.unshift(this._NumChannel),this._ThisSensor.Run.apply(this._ThisSensor,args)}ConfigureRegs(_opts){return this._ThisSensor.ConfigureRegs.apply(this._ThisSensor,Array.from(arguments))}}class ClassDataRefine{constructor(){this._Values=[],this._FilterFunc=arr=>arr.reduce((curr,pr)=>curr+pr,0)/arr.length,this.SetOutLim(-1/0,1/0),this.SetTransmissionOut(1,0)}SetFilterFunc(_func){if("function"!=typeof _func)throw new Error("Not a function");return this._FilterFunc=_func,!0}SetOutLim(_limLow,_limHigh){if("number"!=typeof _limLow||"number"!=typeof _limHigh)throw new Error("Not a number");if(_limLow>=_limHigh)throw new Error("limLow value shoud be less than limHigh");return this._Values[0]=_limLow,this._Values[1]=_limHigh,!0}SupressOutValue(val){return E.clip(val,this._Values[0],this._Values[1])}SetTransmissionOut(_k,_b){if("number"!=typeof _k||"number"!=typeof _b)throw new Error("Not a number");return this._Values[2]=_k,this._Values[3]=_b,!0}TransformOutValue(val){return val*this._Values[2]+this._Values[3]}}const indexes={redLow:0,yelLow:1,green:2,yelHigh:3,redHigh:4};class ClassAlarms{constructor(){this._Zones=[],this._Callbacks=[],this._CurrZone="green"}SetZones(opts){const checkParams={green:()=>"function"==typeof opts.green.cb,yellow:()=>opts.yellow.low<opts.yellow.high,red:()=>opts.red.low<opts.red.high};if(["red","yellow","green"].filter(zoneName=>opts[zoneName]).forEach(zoneName=>{if(!checkParams[zoneName])throw new Error("Incorrect args")}),opts.yellow){if(opts.red){if(opts.yellow.low<=opts.red.low||opts.yellow.high>=opts.red.high)throw new Error("Invalid args")}else if(opts.yellow.low<this._Zones[indexes.redLow]||opts.yellow.high>this._Zones[indexes.redHigh])throw new Error("Invalid args");this._Zones[indexes.yelLow]=opts.yellow.low,this._Zones[indexes.yelHigh]=opts.yellow.high,this._Callbacks[indexes.yelLow]=opts.yellow.cbLow,this._Callbacks[indexes.yelHigh]=opts.yellow.cbHigh}if(opts.red){if(opts.yellow){if(opts.red.low>=opts.yellow.low||opts.red.high<=opts.yellow.high)throw new Error("Invalid args")}else if(opts.red.low>this._Zones[indexes.yelLow]||opts.red.high<this._Zones[indexes.yelHigh])throw new Error("Invalid args");this._Zones[indexes.redLow]=opts.red.low,this._Zones[indexes.redHigh]=opts.red.high,this._Callbacks[indexes.redLow]=opts.red.cbLow,this._Callbacks[indexes.redHigh]=opts.red.cbHigh}opts.green&&(this._Callbacks[indexes.green]=opts.green.cb)}CheckZone(val){let prevZone=this._CurrZone;this._CurrZone=val<this._Zones[indexes.redLow]?"redLow":val>this._Zones[indexes.redHigh]?"redHigh":val<this._Zones[indexes.yelLow]?"yelLow":val>this._Zones[indexes.yelHigh]?"yelHigh":"green",prevZone!==this._CurrZone&&this._Callbacks[indexes[this._CurrZone]](prevZone)}}exports=ClassMiddleSensor;